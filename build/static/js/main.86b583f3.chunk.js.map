{"version":3,"sources":["Header.js","MemeText.js","Meme.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","MemeText","props","cjs_default","text","Meme","_useState","useState","topText","bottomText","thirdText","fourthText","randomImage","_useState2","Object","slicedToArray","meme","setMeme","_useState3","_useState4","show","setShow","textHandler","event","_event$target","target","name","value","prevMeme","objectSpread","defineProperty","_useState5","_useState6","allMemes","setAllMemes","useEffect","fetch","then","res","json","data","memes","action","type","placeholder","onChange","onClick","e","preventDefault","randomNumber","Math","floor","random","length","url","console","log","Fragment","src_MemeText","App","src_Header","src_Meme","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.86b583f3.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n    return (\n\n        <div className=\"header\">\n            <img src=\"./Troll Face.png\" alt='' />\n            <span>Meme Generator</span>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\r\nimport Draggable from 'react-draggable';\r\nimport './Meme.css';\r\n\r\nfunction MemeText(props) {\r\n  return (\r\n   <Draggable>\r\n    <h2 className=\"meme--text\">{props.text}</h2>\r\n   </Draggable>\r\n  )\r\n}\r\n\r\nexport default MemeText;\r\n","import React, { useState,useEffect } from 'react';\nimport './Meme.css';\nimport Draggable from 'react-draggable';\nimport MemeText from './MemeText';\n\n\nfunction Meme() {\n    // const [memeImage,setMemeImage] = useState(\"\");\n    const [meme, setMeme] = useState({\n        topText :\"\",\n        bottomText :\"\",\n        thirdText:\"\",\n        fourthText:\"\",\n        randomImage:\"http://i.imgflip.com/1bij.jpg\"\n    });\n    \n    const [show,setShow] = useState(false);\n\n    const textHandler =(event) =>{\n        const {name,value} = event.target;\n        setMeme(prevMeme => {\n            return { ...prevMeme,\n                [name]:value\n            }\n        })\n    }\n\n    const [allMemes, setAllMemes] = useState([]);\n    \n    useEffect(()=>{\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(res=> res.json())\n            .then(data =>setAllMemes(data.data.memes))\n    },[])\n    \n   \n\n    const getMemeImage = (e)=>{\n        e.preventDefault();\n        const randomNumber = Math.floor(Math.random() * allMemes.length);\n        const url = allMemes[randomNumber].url;\n        console.log(url);\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            topText :\"\",\n            bottomText :\"\",\n            thirdText:\"\",\n            fourthText:\"\", \n            randomImage: url\n        }));\n    }\n\nconst extraTextHandler =(e)=>{\n    e.preventDefault();\n    setShow(true);\n}\n\n    return (\n        \n        <div className=\"meme\">\n            <form action=\"\">\n                <input\n                name=\"topText\"\n                 type=\"text\" \n                 className=\"meme__inputs\" \n                 placeholder=\"Top Text\" \n                 onChange={textHandler}\n                 value={meme.topText} \n                 />\n                <input \n                name=\"bottomText\"\n                 type=\"text\"\n                 className=\"meme__inputs\"\n                 placeholder=\"Bottom Text\"\n                 onChange={textHandler}\n                 value={meme.bottomText}\n                 />\n                 \n                <button onClick={getMemeImage} className=\"meme__button\">Get a new meme image  ðŸ–¼</button>\n           <div className=\"meme__wrap\">\n            <img className=\"meme__image\" src={meme.randomImage} alt=\"\" />\n\n            <button onClick={extraTextHandler} className=\"text__button\">Add more text</button>\n            { show && (<><input\n                name=\"thirdText\"\n                 type=\"text\" \n                 className=\"meme__inputs\" \n                 placeholder=\"Third Text\" \n                 onChange={textHandler}\n                 value={meme.thirdText} \n                 />\n                <input \n                name=\"fourthText\"\n                 type=\"text\"\n                 className=\"meme__inputs\"\n                 placeholder=\"Fourth Text\"\n                 onChange={textHandler}\n                 value={meme.fourthText}\n                 /></>)}\n           \n            <MemeText text={meme.topText}/>\n             <MemeText text={meme.bottomText}/>\n             <MemeText text={meme.thirdText}/>\n             <MemeText text={meme.fourthText}/>\n           \n            </div>            \n             \n           </form>  \n           \n                    \n        </div>\n    )\n}\n\nexport default Meme\n\n//WITHOUT DRAGGABLE\n {/* <h2 className=\"meme--text top\" >{meme.topText}</h2> */}\n {/* <h2 className=\"meme--text bottom\">{meme.bottomText}</h2> */}\n           ","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Meme from './Meme';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Meme />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}